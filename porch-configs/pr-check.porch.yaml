name: PR Check
description: |
  This configuration file is used to run checks for Azure Verified Modules during pull requests.
commands:
  - type: shell
    name: Check for uncommitted changes
    command_line: |
      if [ -n "$(git status --porcelain)" ]; then
        echo "Uncommitted changes found. Please commit or stash them before running the checks." 1>&2
        git status --porcelain 1>&2
        exit 1
      fi

    # all linting checks go here, they all use a unique directory
  - type: parallel
    name: linting
    commands:
      # Run tflint on root, modules and examples
      - type: serial
        name: tflint
        commands:
          - type: copycwdtotemp
            name: Copy current working directory to temp

          # tflint
          - type: shell
            name: download configs
            command_line: |
              if [ -z "$TFLINT_CONFIG_URL" ]; then
                TFLINT_CONFIG_URL="https://raw.githubusercontent.com/Azure/avm-terraform-governance/main/tflint-configs"
              fi
              for file in avm.tflint.hcl avm.tflint_example.hcl avm.tflint_module.hcl; do
                curl -H 'Cache-Control: no-cache, no-store' -sSL "$TFLINT_CONFIG_URL/$file" -o "./$file"
              done

          # tflint
          - type: shell
            name: overrides
            command_line: |
              for file in avm.tflint avm.tflint_example avm.tflint_module; do
                if [ -f "./${file}.override.hcl" ]; then
                  echo "Overriding ${file}"
                  hclmerge -1 "./$file.override.hcl" -2 "./${file}.hcl" -d "./${file}.merged.hcl"
                  mv "./${file}.merged.hcl" "./${file}.hcl"
                fi
              done

          # tflint
          - type: serial
            name: run
            commands:
              - type: shell
                name: root module
                command_line: |
                  tflint --init --config="avm.tflint.hcl"
                  tflint --config="avm.tflint.hcl" --minimum-failure-severity=warning 1>&2

              # tflint
              - type: foreachdirectory
                name: examples
                working_directory: "./examples"
                mode: parallel
                runs_on_condition: always
                commands:
                  - type: shell
                    name: run example
                    command_line: |
                      echo $(pwd) 1>&2
                      tflint --init --config="../avm.tflint_example.hcl" && \
                      tflint --config="../../avm.tflint_example.hcl" --minimum-failure-severity=warning --chdir="./$ITEM" 1>&2

              # tflint
              - type: foreachdirectory
                name: modules
                working_directory: "./modules"
                mode: parallel
                runs_on_condition: always
                commands:
                  - type: shell
                    name: run module
                    command_line: |
                      echo $(pwd) 1>&2
                      tflint --init --config="../avm.tflint_module.hcl" && \
                      tflint --config="../../avm.tflint_module.hcl" --minimum-failure-severity=warning --chdir="./$ITEM" 1>&2

      # grept
      - type: serial
        name: check grept
        commands:
          - type: copycwdtotemp
            name: Copy to temp

          - type: shell
            name: Grept apply
            command_line: |
              if [ -z "$GREPT_URL" ]; then
                GREPT_URL="git::https://github.com/Azure/avm-terraform-governance.git//grept-policies"
              fi
              grept apply -a "$GREPT_URL"

          - type: shell
            name: Check for grept changes
            command_line: |
              if [ -n "$(git status --porcelain)" ]; then
                echo "Grept changes found, run pre-commit" 1>&2
                git status --porcelain 1>&2
                exit 1
              fi

        # Check mapotf transforms have been applied
      - type: serial
        name: check mapotf
        commands:
          - type: copycwdtotemp
            name: Copy to temp

          - type: shell
            name: mapotf transform
            command_line: |
              if [ -z "$MPTF_URL" ]; then
                MPTF_URL="git::https://github.com/Azure/avm-terraform-governance.git//mapotf-configs/pre-commit"
              fi
              mapotf transform --mptf-dir "$MPTF_URL" --tf-dir .

            # mapotf
          - type: shell
            name: mapotf clean
            command_line: mapotf clean-backup --tf-dir .
            runs_on_condition: always

            # mapotf
          - type: shell
            name: Check for mapotf changes
            command_line: |
              if [ -n "$(git status --porcelain)" ]; then
                echo "Mapotf changes found, run pre-commit" 1>&2
                git status --porcelain 1>&2
                exit 1
              fi

        # Check docs are up to date
      - type: serial
        name: Check docs
        commands:
          - type: copycwdtotemp
            name: Copy to temp
          - type: parallel
            name: Generate docs
            commands:
              - type: shell
                name: Generate root module docs
                command_line: |
                  terraform-docs -c ".terraform-docs.yml" .

                # docs
              - type: foreachdirectory
                name: examples
                working_directory: "./examples"
                mode: parallel
                commands:
                  - type: shell
                    name: Generate example docs
                    command_line: |
                      terraform-docs -c ".terraform-docs.yml" $ITEM

                # docs
              - type: foreachdirectory
                name: modules
                working_directory: "./modules"
                mode: parallel
                commands:
                  - type: shell
                    name: Generate module docs
                    command_line: |
                      terraform-docs -c ".terraform-docs.yml" $ITEM

          - type: shell
            name: Check for docs changes
            command_line: |
              if [ -n "$(git status --porcelain)" ]; then
                echo "Documents not up to date, run pre-commit" 1>&2
                git status --porcelain 1>&2
                exit 1
              fi

    # Run conftest checks
  - type: serial
    name: well architected
    commands:
      - type: copycwdtotemp
        name: Copy to temp

        # This kicks off the tfenv installer
      - type: shell
        name: install terraform
        command_line: |
          terraform

      - type: foreachdirectory
        name: well architected
        working_directory: "./examples"
        mode: parallel
        working_directory_strategy: "item_relative"
        commands:
          # conftest
          - type: shell
            name: Clean Terraform
            command_line: |
              echo $(pwd) && \
              find . -type d -name .terraform | xargs -n1 rm -rf && \
              find . -type f -name .terraform.lock.hcl | xargs -n1 rm -f && \
              find . -type f -name *.tfstate* | xargs -n1 rm -f

          # conftest
          - type: shell
            name: Clean Terraform
            command_line: |
              echo $(pwd) && \
              find . -type d -name .terraform | xargs -n1 rm -rf && \
              find . -type f -name .terraform.lock.hcl | xargs -n1 rm -f && \
              find . -type f -name *.tfstate* | xargs -n1 rm -f

            # conftest
          - type: shell
            name: terraform init
            command_line: terraform init -input=false

            # conftest
          - name: terraform plan
            type: shell
            command_line: terraform plan -out=tfplan -input=false

            # conftest
          - name: terraform show
            type: shell
            command_line: terraform show -json tfplan > tfplan.json

            # conftest
          - type: shell
            name: download exemptions
            command_line: |
              if [ -z "$CONFTEST_EXCEPTIONS_URL" ]; then
                CONFTEST_EXCEPTIONS_URL="https://raw.githubusercontent.com/Azure/policy-library-avm/main/policy/avmsec/avm_exceptions.rego.bak"
              fi

              mkdir -p ./policy/default_exceptions
              curl -sS -o ./policy/default_exceptions/avmsec_exceptions.rego "$CONFTEST_EXCEPTIONS_URL"

            # conftest
          - type: shell
            name: run aprl
            command_line: |
              if [ -d "exceptions" ]; then
                export LOCALEXCEPTION="-p exceptions"
              fi
              if [ -z "$CONFTEST_APRL_URL" ]; then
                CONFTEST_APRL_URL="git::https://github.com/Azure/policy-library-avm.git//policy/Azure-Proactive-Resiliency-Library-v2"
              fi
              conftest test --all-namespaces --update "$CONFTEST_APRL_URL" -p policy/aprl -p policy/default_exceptions $LOCALEXCEPTION tfplan.json

            # conftest
          - type: shell
            name: run avmsec
            command_line: |
              if [ -d "exceptions" ]; then
                export LOCALEXCEPTION="-p exceptions"
              fi
              if [ -z "$CONFTEST_AVMSEC_URL" ]; then
                CONFTEST_AVMSEC_URL="git::https://github.com/Azure/policy-library-avm.git//policy/avmsec"
              fi
              conftest test --all-namespaces --update "$CONFTEST_AVMSEC_URL" -p policy/avmsec -p policy/default_exceptions $LOCALEXCEPTION tfplan.json
