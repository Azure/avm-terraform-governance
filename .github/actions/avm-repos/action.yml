author: AVM
name: avm-repos
description: Gets AVM repositories based on GH app installation and outputs them as a JSON array.
inputs:
  repositories:
    description: "Target repositories, use this syntax to select specific repositories: 'avm-res-keyvault-vault'."
    default: "All"
  first_run:
    description: "Whether to run in first run mode"
    default: "false"
  protectedReposFilePath:
    description: "Path to the protected repositories file"
    default: "${{ github.workspace }}/tf-repo-mgmt/protected_repos/ProtectedRepos.csv"
  outputDirectory:
    description: "Output directory for the repository data"
    default: "${{ github.workspace }}"
  clientId:
    description: "GitHub App Client ID"
    required: true
  privateKey:
    description: "GitHub App Private Key"
    required: true
outputs:
  matrix:
    description: The repository data
    value: ${{ steps.matrix.outputs.matrix }}
  matrixParallel:
    description: The number of parallel jobs to run
    value: ${{ steps.matrix.outputs.matrixParallel }}

runs:
  using: composite
  steps:
    - name: Create GitHub App Token
      id: app-token
      uses: actions/create-github-app-token@5d869da34e18e7287c1daad50e0b8ea0f506ce69 # v1.11.0
      with:
        app-id: ${{ inputs.clientId }}
        private-key: ${{ inputs.privateKey }}
        owner: ${{ github.repository_owner }}

    - name: Generate Matrix
      id: matrix
      run: |
        $triggerType = "${{ github.event_name }}"

        $repositories = "All"
        $firstRun = $false

        if($triggerType -eq "workflow_dispatch") {
          $repositories = "${{ inputs.repositories }}"
          $firstRun = "${{ inputs.first_run }}".ToLower() -eq "true"
        }

        $matrixParallel = 5
        if($firstRun) {
          $matrixParallel = 1
        }
        Write-Output "matrixParallel=$matrixParallel" >> $env:GITHUB_OUTPUT

        if($repositories -eq "All") {
          $repositories = @()
        } else {
          $repositories = $repositories -split ','
        }
        $matrix = @(& "${{ github.action_path }}/scripts/Get-RepositoriesWhereAppInstalled.ps1" -repoFilter $repositories -outputDirectory "${{ inputs.outputDirectory }}" -protectedReposFilePath "${{ inputs.protectedReposFilePath }}")
        $matrixJson = ConvertTo-Json $matrix -Depth 10 -Compress
        Write-Host (ConvertTo-Json $matrix -Depth 10)
        Write-Output "matrix=$matrixJson" >> $env:GITHUB_OUTPUT
      shell: pwsh
      env:
        GH_TOKEN: ${{ steps.app-token.outputs.token }}

    - name: Upload Repo Logs Json
      if: always() && hashFiles('warning.log.json') != ''
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: warning.log.json
        path: warning.log.json

    - name: Repo Error
      if: always() && hashFiles('warning.log.json') != ''
      run: |
        $issueLogJson = Get-Content -Path "${{ github.workspace }}/warning.log.json" -Raw
        $issueLog = ConvertFrom-Json $issueLogJson
        $issueLog | ForEach-Object {
          echo "::error title=$($_.repoId) has issues::$($_.message)"
        }
      shell: pwsh
