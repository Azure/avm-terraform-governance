---
name: pre-commit-cron

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: 'Override the target repositories, use a comma separated list. Leave as All to run on all repositories.'
        default: 'All'
        type: string
      first_run:
        description: 'Whether to run in first run mode'
        default: false
        type: boolean
  # schedule:
  #   - cron: '34 4 * * 0,3,5'

permissions:
  id-token: write
  contents: read

defaults:
  run:
    working-directory: ./tf-repo-mgmt/repository_sync

jobs:
  generate-matrix:
    name: Generate Matrix
    runs-on: ubuntu-latest
    environment: avm
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      matrixParallel: ${{ steps.matrix.outputs.matrixParallel }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Create GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@5d869da34e18e7287c1daad50e0b8ea0f506ce69 # v1.11.0
        with:
          app-id: ${{ secrets.AVM_APP_CLIENT_ID }}
          private-key: ${{ secrets.AVM_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Generate Matrix
        id: matrix
        run: |
          $triggerType = "${{ github.event_name }}"

          $repositories = "All"
          $firstRun = $false

          if($triggerType -eq "workflow_dispatch") {
            $repositories = "${{ inputs.repositories }}"
            $firstRun = "${{ inputs.first_run }}".ToLower() -eq "true"
          }

          $matrixParallel = 5
          if($firstRun) {
            $matrixParallel = 1
          }
          Write-Output "matrixParallel=$matrixParallel" >> $env:GITHUB_OUTPUT

          if($repositories -eq "All") {
            $repositories = @()
          } else {
            $repositories = $repositories -split ','
          }
          $matrix = @(../scripts/Get-RepositoriesWhereAppInstalled.ps1 -repoFilter $repositories -outputDirectory "${{ github.workspace }}" -protectedReposFilePath "../protected_repos/ProtectedRepos.csv")
          $matrixJson = ConvertTo-Json $matrix -Depth 10 -Compress
          Write-Host (ConvertTo-Json $matrix -Depth 10)
          Write-Output "matrix=$matrixJson" >> $env:GITHUB_OUTPUT
        shell: pwsh
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Upload Repo Logs Json
        if: always() && hashFiles('warning.log.json') != ''
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: warning.log.json
          path: warning.log.json

      - name: Repo Error
        if: always() && hashFiles('warning.log.json') != ''
        run: |
          $issueLogJson = Get-Content -Path "${{ github.workspace }}/warning.log.json" -Raw
          $issueLog = ConvertFrom-Json $issueLogJson
          $issueLog | ForEach-Object {
            echo "::error title=$($_.repoId) has issues::$($_.message)"
          }
        shell: pwsh

  run-sync:
    name: ${{ matrix.repoId }} (${{ matrix.repoUrl }})
    runs-on: ubuntu-latest
    environment: avm
    needs: generate-matrix
    strategy:
      fail-fast: false
      max-parallel: ${{ fromJson(needs.generate-matrix.outputs.matrixParallel) }}
      matrix:
        include: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@ee0669bd1cc54295c223e0bb666b733df41de1c5 # v2.7.0
        with:
          repository: ${{ matrix.repoFullName }}

      - name: Create GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@5d869da34e18e7287c1daad50e0b8ea0f506ce69 # v1.11.0
        with:
          app-id: ${{ secrets.AVM_APP_CLIENT_ID }}
          private-key: ${{ secrets.AVM_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Run pre-commit
        run: ./avm pre-commit
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and push changes
        id: changes
        run: |
          # Check if there are ANY changes (including untracked files)
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes detected"
            exit 0
          fi

          git config --global user.name "Azure Verified Modules [bot]"
          git config --global user.email "no-reply@azure.com"
          git add .
          git commit -m "chore: pre-commit updates"
          git push
        shell: bash
